import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

android {
    compileSdk = 33
    buildToolsVersion = '33.0.0'
    ndkVersion "21.1.6352462"

    defaultConfig {
        targetSdk = 33
    }

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            version '3.18.1'
            path 'jni/CMakeLists.txt'
        }
    }

    lintOptions {
        abortOnError false
        baseline file("config/lint-baseline.xml")
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    dexOptions {
        jumboMode = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude("META-INF/*.kotlin_module")
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'SYMBOL_TABLE'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", "false"
        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'SYMBOL_TABLE'
            buildConfigField "String", "BUILD_VERSION_STRING", "\"" + APP_VERSION_NAME + "\""
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", "false"
        }
    }

    sourceSets.debug {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }

    sourceSets.release {
        manifest.srcFile 'config/release/AndroidManifest.xml'
    }

    def props = new Properties()
    file("../TMessagesProj_App/version.properties").withInputStream { props.load(it) }
    def majorVersion = Integer.valueOf(props.getProperty("major"))
    def minorVersion = Integer.valueOf(props.getProperty("minor"))
    def hotfixVersion = Integer.valueOf(props.getProperty("hotfix"))
    def calculatedVersionCode = (majorVersion * 100 + minorVersion) * 100 + hotfixVersion

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += [
                    "-Xjvm-default=all",
            ]
        }
    }

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 33
        buildConfigField 'String', 'VERSION_NAME', "\"$majorVersion.$minorVersion.$hotfixVersion\""
        buildConfigField 'int', 'VERSION_CODE', "$calculatedVersionCode"
        buildConfigField 'String', 'APPLICATION_ID', "\"ru.sberdevices.telegramcalls\""
        vectorDrawables.generatedDensities = ['mdpi', 'hdpi']

        ndk {
            abiFilters "armeabi-v7a"
        }

        externalNativeBuild {
            cmake {
                version '3.18.1'
                arguments '-DANDROID_STL=c++_static', "-DCMAKE_BUILD_TYPE=Release"
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.aar'], dir: "libs")

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"
    implementation "androidx.mediarouter:mediarouter:1.2.6"

    implementation "com.squareup.picasso:picasso:2.71828"

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.firebase:firebase-config:21.0.1'
    implementation 'com.google.firebase:firebase-datatransport:18.1.0'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.4.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:16.1.1'
    implementation 'com.android.billingclient:billing:5.1.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'com.google.guava:guava:31.1-android'
    implementation files('libs/libgsaverification-client.aar')

    // SberDevices
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.21"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"

    // StarOS
    implementation files('libs/telegram_dependencies-debug.aar')
    implementation "com.google.protobuf:protobuf-java:3.10.0"

    implementation("com.airbnb.android:lottie:4.2.1")
    implementation("androidx.compose.ui:ui:1.3.3")
    implementation("androidx.compose:compose-bom:2022.11.00")
    implementation("com.facebook.shimmer:shimmer:0.5.0")
    implementation("com.google.android.material:material:1.3.0")
    implementation("androidx.recyclerview:recyclerview:1.3.0")

    // Analytics
    implementation 'io.sentry:sentry-android:6.6.0'

    // Testing
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
}


def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}
apply plugin: 'com.google.gms.google-services'
